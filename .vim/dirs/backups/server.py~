
import threading
import socket
import time


class Server:
    def __init__(self):
        self.host = ''
        self.port = 51423
        self.bufsize = 1024
        self.addr = (self.host, self.port)
        self.udpPort = self.port + 100
        self.udpAddr = (self.host, self.udpPort)

        self.tcpSerSock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.tcpSerSock.bind(self.addr)
        self.tcpSerSock.listen(1)

        self.udpSerSock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.udpSerSock.bind(self.udpAddr)

        self.shutdown = False

        self.cliList = []
        self.udpCliList = []

    def talk(self, tcpCliSock, addr):
        print(' Talk with client@{}'.format(addr))
        while True:
            data = tcpCliSock.recv(self.bufsize)
            data = data.decode()
            if not data:
                break
            sb = '[{}:{}]\n\t{}'.format('Server', time.ctime(), 'received')
            ss = '[{}:{}]\n\t{}'.format(addr, time.ctime(), data)
            tcpCliSock.sendall(sb.encode())
            for otherCliSock, otherAddr in self.cliList:
                if otherCliSock != tcpCliSock:
                    otherCliSock.sendall(ss.encode())
            print(ss)
            if data == 'shutdown':
                self.shutdown = True
                break
            if data == 'bye':
                break
        print('bye-bye: [%s:%d]' % (addr[0], addr[1]))
        tcpCliSock.close()

    def videoChat(self):
        while True:
            data, address = self.udpSerSock.recvfrom(self.bufsize)
            if address not in self.udpCliList:
                print('new client@{} joined group video chat'.foramt(address))
                self.udpCliList.append(address)
            if data:
                for udpCliAddr in self.udpCliList:
                    if udpCliAddr != address:
                        self.udpSerSock.sendto(data, udpCliAddr)

    def waitForClient(self):
        print('waiting for connection...')
        while True:
            tcpCliSock, addr = self.tcpSerSock.accept()
            self.cliList.append((tcpCliSock, addr))
            print('...connected from: ', addr)
            try:
                thread = threading.Thread(target=self.talk, args=(tcpCliSock, addr, ))
                thread.start()
            except Exception as e:
                print('failed to start new threading')
                print(e)

            if self.shutdown:
                break
        self.tcpSerSock.close()
        print('Server has been closed')

    def run(self):
        mainThread = threading.Thread(target=self.waitForClient)
        mainThread.start()
        videoChatThread = threading.Thread(target=self.videoChat)
        videoChatThread.start()


server = Server()
server.run()
