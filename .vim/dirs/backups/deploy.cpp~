#include "deploy.h"
#include <stdio.h>
#include "lib_time.h"
#include<iostream>
#include<time.h>

#define MAX 999999


int n,m,t;
int cost;
int amap[50001][4];
int aneed[5000][3];
int allneed;
int getf;
int CONST;

int pre[5001];
int dist[50001];

int q[5000000]; 
int inq[50001];
int min_c_f;
int vertex;
int sum;
int name[5001];
int end1;
int ansnum;
int anssum;
int answay[10000][100];
struct element
{
    int c;
    int f;
    int c_f;
    int v;
} G[3001][3001];
int sercost[5000];
 
int init(char * topo[MAX_EDGE_NUM]){
	int i,j,k;
	sscanf(topo[0],"%d%d%d",&n,&m,&t);
	sscanf(topo[2],"%d",&cost);
	for(i=1;i<=n;i++)name[i]=-1; 
	for(i=0;i<m;i++){
		sscanf(topo[4+i],"%d%d%d%d",&amap[i][0],&amap[i][1],&amap[i][2],&amap[i][3]);
		amap[i][0]++;
		amap[i][1]++;
	}
	allneed=0;
	for(i=0;i<t;i++){
		sscanf(topo[5+m+i],"%d%d%d",&aneed[i][0],&aneed[i][1],&aneed[i][2]);
		aneed[i][1]++;
		allneed+=aneed[i][2];
		name[aneed[i][1]]=aneed[i][0]; 
	}
	
	
	CONST=0;
	for(i=1;i<=n;i++)
	sercost[i]=cost;
	return 0;
}

int build_map(){
	vertex=2*n+1;
	end1=2*n+1; 
	for(int u=0; u<=vertex; u++)
    {
        for(int v=0; v<=vertex; v++)
        {
            G[u][v].c=G[v][u].c=0;
            G[u][v].c_f=G[v][u].c_f=0;
            G[u][v].f=G[v][u].f=0;
            G[u][v].v=G[v][u].v=MAX;
            
        }
    }
    
    for(int i=0;i<t;i++){
    	G[0][aneed[i][1]].c=aneed[i][2];
    	G[0][aneed[i][1]].v=0;
    	G[0][aneed[i][1]].f=0;
    	G[0][aneed[i][1]].c_f=aneed[i][2];
    	G[aneed[i][1]][0].v=0;
    	
    	
    	
    	
    	
    	
	}
	for(int i=0;i<n;i++)
	{
		G[(i+1)+n][end1].c=MAX;
		G[(i+1)+n][end1].v=sercost[i+1];
		G[(i+1)+n][end1].c_f=MAX;
		G[end1][(i+1)+n].v=-sercost[i+1];
		
		 
		
		
		
		
	}
	for(int i=0;i<m;i++){
		G[amap[i][0]][amap[i][1]].c=amap[i][2];
		G[amap[i][0]][amap[i][1]].v=amap[i][3];
		G[amap[i][0]][amap[i][1]].c_f=amap[i][2];
		G[amap[i][1]][amap[i][0]].v=-amap[i][3];
		
		G[amap[i][1]+n][amap[i][0]+n].c=amap[i][2];
		G[amap[i][1]+n][amap[i][0]+n].v=amap[i][3];
		G[amap[i][1]+n][amap[i][0]+n].c_f=amap[i][2];
		G[amap[i][0]+n][amap[i][1]+n].v=-amap[i][3];
		
	}
	
	for(int i=1;i<=n;i++)
	{
		G[i][i+n].c=MAX;
		G[i][i+n].c_f=MAX;
		G[i][i+n].v=0;
		G[i+n][i].c=MAX;
		G[i+n][i].c_f=MAX;
		G[i+n][i].v=0;
		
	}
	
	return 0; 
}
int SPFA(int s)
{
    
    int fir,sec;
    fir=0;sec=0;
    int mid;
    int u;
    int cnt[3001]; 
    for(int i=0; i<=vertex; i++)
    {
    	cnt[i]=0;
        dist[i]=MAX;
        pre[i]=-1;
        inq[i]=0;
    }
    dist[s]=0;
    
    q[sec++]=s;
    inq[s] = 1;
    while(sec-fir!=0)
    {
    	if(sec>5000000)printf("error\n"); 
    	
		
        
        u=q[fir++];
		
        inq[u]=0;
        for(int i=0; i<=vertex; i++)
        {
            int v=i;
            if(G[u][v].c_f==0)     
                continue;
            
            
            /*if(v!=end1&&)mid=G[u][v].v;
            else {
			   if(G[u][v].f!=0)mid=0;
			   else mid=cost;
            }
            */
            if(dist[v]>dist[u]+G[u][v].v)
            {
                dist[v]=dist[u]+G[u][v].v;
                pre[v]=u;
                if(inq[v]==0)
                {
                    
                   
                    q[sec++]=v;
                    inq[v]=1;
                    
                    
				
                }
            }
        }
    }
    return -1;
}
int find_way(char *output){
	sprintf(output,"%d\n\n",ansnum);
	int i,j,k;
	for(i=1;i<=ansnum;i++)
	{
		for(j=1;j<answay[i][0];j++)
		if(answay[i][j]>n&&answay[i][j]<=2*n)answay[i][j]-=n;
		for(j=1;j<answay[i][0];j++)
		if(answay[i][j]!=answay[i][j-1])printf("%d ",answay[i][j]-1);
		sprintf(output,"%d ",name[answay[i][answay[i][0]-1]]);
		sprintf(output,"%d\n",answay[i][answay[i][0]]);
	}
	return 0;
}
void ford_fulkerson(int s,int t)
{
    SPFA(s);
    while(pre[t]!=-1)
    {
    	
    	
        
        min_c_f=MAX;
        int u=pre[t], v=t;
        while(u!=-1)
        {
            if(min_c_f > G[u][v].c_f)
                min_c_f=G[u][v].c_f;
            v=u;
            u=pre[v];
        }
        u=pre[t], v=t;
        if(min_c_f!=0){
        	ansnum++;
		}
        while(u!=-1)
        {
        	answay[ansnum][++answay[ansnum][0]]=u;
        	
        	
        		sum+=min_c_f*G[u][v].v;
		
			
			
			
            G[u][v].f+=min_c_f; 
            G[v][u].f=-G[u][v].f;
            G[u][v].c_f=G[u][v].c-G[u][v].f; 
            G[v][u].c_f=G[v][u].c-G[v][u].f;
            v=u;
            u=pre[v];
        }
        answay[ansnum][0]--;
        if(name[answay[ansnum][answay[ansnum][0]]]==-1)ansnum--;
        else answay[ansnum][++answay[ansnum][0]]=min_c_f;
        SPFA(s);
    }
}

int print(){
	int i,j,k;
	int can;
	can=0;
	CONST=MAX;
	 
	for(i=1;i<=n;i++)
	if(G[i+n][end1].f<CONST)CONST= G[i+n][end1].f;
	CONST+=20;
	for(i=1;i<=n;i++)
	{
		if(G[i+n][end1].f>CONST)
		sercost[i]=cost/G[i+n][end1].f;
		else sercost[i]=cost;
		
	}
	for(i=n+1;i<=2*n;i++){
	can+=G[i][end1].f;
	
	
	
	}
	
	if(can<allneed){
		getf=1;printf("NA");return 0;
	}
	else{
		if(sum==anssum){
		getf=1;return 0;}
		else anssum=sum;
	    
	    
	}
	
	
	
	
	return 0;
}
void deploy_server(char * topo[MAX_EDGE_NUM], int line_num,char * filename)
{

	

    time_t startt ,end1t ;  
    double costt;  
    time(&startt);  
    init(topo);
		while(getf==0){
    	build_map();
        ford_fulkerson(0,vertex);
        print();
        time(&end1t);  
        costt=difftime(end1t,startt);  
        
        if(costt>89.0)break;
        if(getf!=1){
		for(int i=1;i<=ansnum;i++)
	    answay[i][0]=0;
	    ansnum=0;sum=0;
		}
	}
	for(int i=n+1;i<=2*n;i++){
	
	sum-=G[i][end1].f*G[i][end1].v;
	if(G[i][end1].f>0)sum+=cost;
	
	}

	char topo_file[200000];
	find_way(topo_file);
	
	write_result(topo_file, filename);

}
