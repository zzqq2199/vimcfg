http://192.168.1.1/,v
                print('Recv data [{}]from address:{}'.format(data, address)),V
,V
                ,V
D,v
server.waitForClient(),V
                    self.udpSerSock.sendto(data,otherAddr)kk,V
                if otherAddr != address:,V
            for otherCliSock, otherAddr in self.cliList:,V
                    otherCliSock.sendall(data.encode()),V
                if otherCliSock != tcpCliSock:,V
                threading.Thread(self.talk, (tcpCliSock, addr, )),V
                threading.start_new_thread(self.talk, (tcpCliSock, addr, )),V
            Exception:,V
                k,V
            execpt Exception as e:,V
            print('waiting for connection...'),V
    while True:                data = tcpCliSock.recv(self.bufsize)                data = data.decode()                if not data:                    break                ss = '[{}] {}'.format(time.ctime(), data)                tcpCliSock.sendall(ss.encode())                print(ss)                if data == 'shutdown':                    self.shutdown = True                    break                if data == 'bye':                    break            print('bye-bye: [%s:%d]' % (addr[0], addr[1]))            tcpCliSock.close()         ,v
        if (MyID==0) printf("choose p-1 element as division:\n");,V
or data=='shutdown':,v
    def __init__(self):,V
    def __init__(),V
class Server:,V
import sockethost='192.168.1.147'port=51423bufsize=1024addr=(host,port)tcpCliSock=socket.socket(socket.AF_INET,socket.SOCK_STREAM)tcpCliSock.connect(addr)while True:	data=input('>')	if not data:		continue	print('input data:[%s]' %data)	tcpCliSock.sendall(data.encode('utf-8'))	rdata=tcpCliSock.recv(bufsize)	if not rdata:		break	print(rdata.decode('utf-8'))	if data=='bye' or data=='shutdown':		break,v
            再选择排序后的第P-1，2(P-1)，…，(P-1)(P-1)个共P-1个主元，，对应于算法1步骤（3）*/,V
            有序的数据序列做P路归并，,V
            /* 处理器P0将上一步送来的P段,V
            1步骤（3） */,V
            到处理器P0中，对应于算法,V
            /*每个处理器将选好的代表元素送,V
    步骤（2）*/,V
    表元素，其中w=n/P*P，对应于算法1,V
    3w，…，(P-1)w个共P-1个数据作为代,V
    /*每个处理器从排好序的序列中选取第w，2w，,V
    列，对应于算法1步骤（1）*/,V
    排序(Quicksort)，得到一个排好序的序,V
    /*每个处理器将自己的n/P个数据用串行快速,V
    //int ready;,V
    //FILE * fp;,V
            所有处理器中，对应于算法1步骤（4）*/,V
            /*处理器P0将这P-1个主元播送到,V
        记为处理器Pi的第j+1段，其中i=0,…,P-1，j=0,…,P-1，对应于算法1步骤（5）*/,V
        元把自己的n/P个数据分成P段，,V
        /*每个处理器根据上步送来的P-1个主,V
        骤（6）*/,V
        (i=0,…,P-1)，，对应于算法1步,V
        有处理器的第i段数据,V
        Pi，从而使得第i个处理器含有所,V
        /*每个处理器送它的第i+1段给处理器,V
        //multimerge(arr1,temp1,arr,&k,SumID);,V
        //k = 0;,V
        步骤（7） */,V
        数据便是有序的，，对应于算法1,V
        一步的到的数据排序；从而这n个,V
        /*每个处理器再通过P路归并排序将上,V
            quicksort(temp1,0,SumID*Spt-1);,V
void merror(char* ch);,V
/*输出错误信息*/,V
int merge(int *data1,int s1,int s2,int *data2);,V
int quicksort(int *datas,int bb,int ee);,V
/*串行快速排序算法*/,V
int multimerge(int *data1,int *ind,int *data,int *iter,int SumID);,V
/*串行多路归并算法*/,V
    {        while(i<j)        {            while ((i<j)&&(tt<=datas[j]))                j--;            if (i<j)            {                datas[i] = datas[j];                i++;                while ((i<j)&&                        (tt>datas[i]))                    i++;                if (i<j)                {                    datas[j] = datas[i];                    j--;                    if (i==j)                        datas[i] = tt;                }                else                    datas[j] = tt;            }            else                datas[i] = tt;        }        quicksort(datas,bb,i-1);        quicksort(datas,i+1,ee);    }    return 0;}/*串行多路归并算法*/int multimerge(int *data1,int *ind,int *data,int *iter,int               SumID){    int i,j,n;    j = 0;    for (i=0; i<SumID; i++)        if (ind[i]>0)        {            ind[j++] = ind[i];            if (j<i+1) ind[i] = 0;        }    if ( j>1 )    {        n = 0;        for (i =0; i<j,i+1<j; i=i+2)        {            merge(&(data1[n]),ind[i],                  ind[i+1],&(data[n]));            ind[i] += ind[i+1];            ind[i+1] = 0;            n += ind[i];        }        if (j%2==1 )            for (i=0; i<ind[j-1]; i++)                data[n++]=data1[n];        (*iter)++;        multimerge(data,ind,data1,iter,                   SumID);    }    return 0;}int merge(int *data1,int s1,int s2,int *data2){    int i,l,m;    l = 0;    m = s1;    for (i=0; i<s1+s2; i++)    {        if (l==s1)            data2[i]=data1[m++];        else if (m==s2+s1)            data2[i]=data1[l++];        else if (data1[l]>data1[m])            data2[i]=data1[m++];        else            data2[i]=data1[l++];    }    return 0;},V
    for (i=0; i<mylength; i++)    {        arr[i] = (int)rand()%MAX_NUMBER;    }    if (MyID==0) printf("arr originally: \n");    printArr(arr,mylength);    /*每个处理器将自己的n/P个数据用串行快速    排序(Quicksort)，得到一个排好序的序    列，对应于算法1步骤（1）*/    MPI_Barrier( MPI_COMM_WORLD);    qsort(arr,mylength,sizeof(int),cmp);    MPI_Barrier( MPI_COMM_WORLD);     if (MyID==0) printf("arr ofter sorted loaclly: \n");    printArr(arr,mylength);    /*每个处理器从排好序的序列中选取第w，2w，    3w，…，(P-1)w个共P-1个数据作为代    表元素，其中w=n/P*P，对应于算法1    步骤（2）*/    if (SumID>1)    {        MPI_Barrier(MPI_COMM_WORLD);        n = (int)(mylength/(Spt+1));        for (i=0; i<Spt; i++)            temp1[i] = arr[(i+1)*n-1];        MPI_Barrier(MPI_COMM_WORLD);        if (MyID==0)        {            /*每个处理器将选好的代表元素送            到处理器P0中，对应于算法            1步骤（3） */            j = 0;            for (i=1; i<SumID; i++)                MPI_Irecv(&temp1[i*Spt],                          sizeof(int)*Spt,                          MPI_CHAR, i,ALLTOONE_TYPE+i, MPI_COMM_WORLD, &request[j++]);            MPI_Waitall(SumID-1, request,                        status);            /* 处理器P0将上一步送来的P段            有序的数据序列做P路归并，            再选择排序后的第P-1，2(P-1)，…，(P-1)(P-1)个共P-1个主元，，对应于算法1步骤（3）*/            printf("q*q elements before sorted:\n");            for (i=0;i<SumID*Spt;i++){                printf("%d ",temp1[i]);            }            printf("\n");            MPI_Barrier(                MPI_COMM_WORLD);            quicksort(temp1,0,SumID*Spt-1);            MPI_Barrier(                MPI_COMM_WORLD);            printf("q*q elements after sorted:\n");            for (i=0;i<SumID*Spt;i++){                printf("%d ",temp1[i]);            }            printf("\n\n");            for (i=1; i<Spt+1; i++)                temp1[i] = temp1[i*Spt-1];            /*处理器P0将这P-1个主元播送到            所有处理器中，对应于算法1步骤（4）*/            MPI_Bcast(temp1,                      sizeof(int)*(1+Spt), MPI_CHAR, 0,                      MPI_COMM_WORLD);            MPI_Barrier(                MPI_COMM_WORLD);        }        else        {            MPI_Send(temp1,sizeof(int)*Spt,                     MPI_CHAR,0,                     ALLTOONE_TYPE+MyID, MPI_COMM_WORLD);            MPI_Barrier(                MPI_COMM_WORLD);            MPI_Barrier(                MPI_COMM_WORLD);            MPI_Bcast(temp1,                      sizeof(int)*(1+Spt),                      MPI_CHAR, 0,                      MPI_COMM_WORLD);            MPI_Barrier(                MPI_COMM_WORLD);        }        /*每个处理器根据上步送来的P-1个主        元把自己的n/P个数据分成P段，        记为处理器Pi的第j+1段，其中i=0,…,P-1，j=0,…,P-1，对应于算法1步骤（5）*/        if (MyID==0) printf("choose p-1 element as division:\n");        printArr(temp1,1+Spt);        n = mylength;        index[0] = 0;        i = 1;        while ((arr[0]>=temp1[i])&&(i<SumID))        {            index[2*i-1] = 0;            index[2*i] = 0;            i++;        }        if (i==SumID)            index[2*i-1] = n;        c1 = 0;        while (i<SumID)        {            c4 = temp1[i];            c3 = n;            c2 = (int)((c1+c3)/2);            while ((arr[c2]!=c4)&&(c1<c3))            {                if (arr[c2]>c4)                {                    c3 = c2-1;                    c2 = (int)((c1+c3)/2);                }                else                {                    c1 = c2+1;                    c2 = (int)((c1+c3)/2);                }            }            while ((arr[c2]<=c4)&&(c2<n))                c2++;            if (c2==n)            {                index[2*i-1] = n;                for (k=i; k<SumID; k++)                {                    index[2*k] = 0;                    index[2*k+1] = 0;                }                i = SumID;            }            else            {                index[2*i] = c2;                index[2*i-1] = c2;            }            c1 = c2;            c2 = (int)((c1+c3)/2);            i++;        }        if (i==SumID)            index[2*i-1] = n;        MPI_Barrier( MPI_COMM_WORLD);        if (MyID==0) printf("index: \n");        printArr(index,2*SumID);        /*每个处理器送它的第i+1段给处理器        Pi，从而使得第i个处理器含有所        有处理器的第i段数据        (i=0,…,P-1)，，对应于算法1步        骤（6）*/        j = 0;        for (i=0; i<SumID; i++)        {            if (i==MyID)            {                temp1[i] = index[2*i+1]-                           index[2*i];                for (n=0; n<SumID; n++)                    if (n!=MyID)                    {                        k = index[2*n+1]-                            index[2*n];                        MPI_Send(&k,                                 sizeof(int), MPI_CHAR, n, MULTI_LEN+MyID,                                 MPI_COMM_WORLD);                    }            }            else            {                MPI_Recv(&temp1[i],                         sizeof(int), MPI_CHAR, i,MULTI_LEN+i,                         MPI_COMM_WORLD,                         &status[j++]);            }        }        if (MyID==0) printf("process k should collect temp1[i] elements from process i:\n");        printArr(temp1,SumID);        MPI_Barrier(MPI_COMM_WORLD);        j = 0;        k = 0;        l = 0;        for (i=0; i<SumID; i++)        {            MPI_Barrier(                MPI_COMM_WORLD);            if (i==MyID)            {                for (n=index[2*i];                        n<index[2*i+1];                        n++)                    arr1[k++] = arr[n];            }            MPI_Barrier(                MPI_COMM_WORLD);            if (i==MyID)            {                for (n=0; n<SumID; n++)                    if (n!=MyID)                    {                        MPI_Send(&arr[                                     index[2*n]], sizeof(int)*                                 (index[2*n+1]-index[2*n]),MPI_CHAR, n, MULTI_TYPE+MyID, MPI_COMM_WORLD);                    }            }            else            {                l = temp1[i];                MPI_Recv(&arr1[k],                         l*sizeof(int),                         MPI_CHAR,                         i ,MULTI_TYPE+i,                         MPI_COMM_WORLD,                         &status[j++]);                k=k+l;            }            MPI_Barrier(                MPI_COMM_WORLD);        }        mylength = k;        MPI_Barrier(MPI_COMM_WORLD);        if(MyID==0) printf("after collect elements from other processes:\n");        printArr(arr1,mylength);        /*每个处理器再通过P路归并排序将上        一步的到的数据排序；从而这n个        数据便是有序的，，对应于算法1        步骤（7） */        //k = 0;        //multimerge(arr1,temp1,arr,&k,SumID);        int pt[SumID];        pt[0]=0;        for (i=1;i<SumID;i++){            pt[i]=pt[i-1]+temp1[i-1];        }        for (i=0;i<SumID;i++){            temp1[i]=temp1[i]+pt[i];        }        for (k=0;k<mylength;k++){            int mini_v=MAX_NUMBER+1;            int mini_i=0;            for (i=0;i<SumID;i++){                if (pt[i]<temp1[i]){                    if (arr1[pt[i]]<mini_v){                        mini_v=arr1[pt[i]];                        mini_i=i;                    }                }            }            arr[k]=mini_v;            pt[mini_i]++;        }        MPI_Barrier(MPI_COMM_WORLD);    }    printArr(arr,mylength);    return 0;}                j--;,V
            while ((i<j)&&(tt<=datas[j])),V
        {,V
        while(i<j),V
    {,V
    if (i<j),V
    j = ee;,V
    i= bb;,V
    tt = datas[bb];,V
    int tt,i,j;,V
{,V
/*串行快速排序算法*/int quicksort(int *datas,int bb,int ee),V
void merror(char* ch),V
},V
    exit(1);,V
    printf("%s\n",ch);,V
    return 0;,V
    printf("\n");,V
        printf("%d : ",arr[i]);,V
    for (i=0; i<mylength; i++),V
    printf("On node %d the sorted data is :\n",MyID);,V
            pt,V
            },V
                },V
                    if ,V
                if (temp1[2*i+1]>temp1[2*i]){,V
            for (i=0;i<SumID;i++){,V
            mini_i=0;,V
            mini_v=MAX_NUMBER+1;,V
        for (),V
        if (my),V
        if (MyID==0) printf,V
            printf("q*q elements after sorted:\n");            for (i=0;i<SumID*Spt;i++){                printf("%d ",temp1[i]);            }            printf("\n");,V
            printArr(temp1,SumID*Spt);,V
    if (MyID==0) ,v
    printArr(arr,mylength);,V
